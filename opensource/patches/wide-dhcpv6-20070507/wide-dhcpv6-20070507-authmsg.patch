--- wide-dhcpv6-20070507/dhcp6.h.orig	2007-02-27 11:21:40.000000000 -0300
+++ wide-dhcpv6-20070507/dhcp6.h	2007-10-16 15:17:40.000000000 -0200
@@ -382,4 +382,7 @@ enum { DHCP6_AUTHPROTO_UNDEF = -1, DHCP6
 enum { DHCP6_AUTHALG_UNDEF = -1, DHCP6_AUTHALG_HMACMD5 = 1 };
 enum { DHCP6_AUTHRDM_UNDEF = -1, DHCP6_AUTHRDM_MONOCOUNTER = 0 };
 
+#define DHCP6C_ADDR_FILE "/etc/dhcp6c-eth0.save"
+extern char signalProgram[];
+
 #endif /*__DHCP6_H_DEFINED*/
--- wide-dhcpv6-20070507/addrconf.c.orig	2006-12-04 13:18:39.000000000 -0200
+++ wide-dhcpv6-20070507/addrconf.c	2007-10-17 11:42:14.000000000 -0200
@@ -101,6 +101,50 @@ static int na_ifaddrconf __P((ifaddrconf
 
 extern struct dhcp6_timer *client6_timo __P((void *));
 
+int saveAddr2file(ifaddrconf_cmd_t cmd, struct dhcp6_statefuladdr *addr,
+	const char *fileName)
+{
+	char *str_addr = NULL;
+	FILE *fp = NULL;
+
+	// do nothing for remove command
+	if (cmd == IFADDRCONF_REMOVE) return(0);
+
+	/* read address */
+	if ((str_addr = in6addr2str(&addr->addr, 0)) == NULL) {
+		dprintf(LOG_INFO, FNAME, "Error reading address");
+		return(-1);
+	}
+
+	// open file
+	if ((fp = fopen(fileName, "w")) == NULL) {
+		dprintf(LOG_ERR, FNAME, "Error opening file %s for writing",
+			fileName);
+		return(-1);
+	}
+
+	// write to file
+	switch(cmd) {
+		case IFADDRCONF_ADD:
+			fprintf(fp, "IPV6_ADDRESS=%s\n", str_addr);
+			break;
+
+		case IFADDRCONF_REMOVE:
+			fprintf(fp, "IPV6_ADDRESS=\n");
+			break;
+
+		default:
+			dprintf(LOG_ERR, FNAME, "Error in command");
+			return (-1);
+	}
+
+	// close file
+	fclose(fp);
+
+	// return OK
+	return(0);
+}
+
 int
 update_address(ia, addr, dhcpifp, ctlp, callback)
 	struct ia *ia;
@@ -379,6 +423,7 @@ na_ifaddrconf(cmd, sa)
 {
 	struct dhcp6_statefuladdr *addr;
 	struct sockaddr_in6 sin6;
+	int ret = 0;
 
 	addr = &sa->addr;
 	memset(&sin6, 0, sizeof(sin6));
@@ -388,6 +433,14 @@ na_ifaddrconf(cmd, sa)
 #endif
 	sin6.sin6_addr = addr->addr;
 
-	return (ifaddrconf(cmd, sa->dhcpif->ifname, &sin6, 128,
-	    addr->pltime, addr->vltime));
+	ret = ifaddrconf(cmd, sa->dhcpif->ifname, &sin6, 128,
+	    addr->pltime, addr->vltime);
+
+	if (!ret) {
+		saveAddr2file(cmd, addr, DHCP6C_ADDR_FILE);
+		if (signalProgram[0] && cmd == IFADDRCONF_ADD)
+			system(signalProgram);
+	}
+
+	return(ret);
 }
--- wide-dhcpv6-20070507/dhcp6c.c.orig	2007-10-16 15:09:31.000000000 -0200
+++ wide-dhcpv6-20070507/dhcp6c.c	2007-10-16 15:17:12.000000000 -0200
@@ -93,7 +93,7 @@ int ctlsock = -1;		/* control TCP port *
 char *ctladdr = DEFAULT_CLIENT_CONTROL_ADDR;
 char *ctlport = DEFAULT_CLIENT_CONTROL_PORT;
 
-#define DEFAULT_KEYFILE SYSCONFDIR "/dhcp6cctlkey"
+#define DEFAULT_KEYFILE "/etc/dhcp6cctlkey"
 #define CTLSKEW 300
 
 static char *conffile = DHCP6C_CONF;
@@ -106,6 +106,8 @@ static char *ctlkeyfile = DEFAULT_KEYFIL
 static struct keyinfo *ctlkey = NULL;
 static int ctldigestlen;
 
+char signalProgram[200];
+
 static int infreq_mode = 0;
 
 static inline int get_val32 __P((char **, int *, u_int32_t *));
@@ -160,6 +162,8 @@ main(argc, argv)
 	FILE *pidfp;
 	struct dhcp6_if *ifp;
 
+	signalProgram[0] = 0;
+
 #ifndef HAVE_ARC4RANDOM
 	srandom(time(NULL) & getpid());
 #endif
@@ -169,7 +173,7 @@ main(argc, argv)
 	else
 		progname++;
 
-	while ((ch = getopt(argc, argv, "c:dDfik:p:")) != -1) {
+	while ((ch = getopt(argc, argv, "c:dDfik:p:s:")) != -1) {
 		switch (ch) {
 		case 'c':
 			conffile = optarg;
@@ -192,6 +196,13 @@ main(argc, argv)
 		case 'p':
 			pid_file = optarg;
 			break;
+		case 's':
+			if (strlen(optarg) >= sizeof(signalProgram)) {
+				fprintf(stderr, "Signal program command too big!\n");
+				exit(0);
+			}
+			strcpy(signalProgram, optarg);
+			break;
 		default:
 			usage();
 			exit(0);
--- wide-dhcpv6-20070507/dhcp6_ctl.c.orig	2007-10-17 13:31:37.000000000 -0200
+++ wide-dhcpv6-20070507/dhcp6_ctl.c	2007-09-28 16:03:44.000000000 -0300
@@ -159,7 +159,7 @@ dhcp6_ctl_authinit(keyfile, keyinfop, di
 	*digestlenp = MD5_DIGESTLENGTH;
 
 	if ((fp = fopen(keyfile, "r")) == NULL) {
-		dprintf(LOG_ERR, FNAME, "failed to open %s: %s", keyfile,
+		dprintf(LOG_NOTICE, FNAME, "failed to open %s: %s", keyfile,
 		    strerror(errno));
 		return (-1);
 	}
