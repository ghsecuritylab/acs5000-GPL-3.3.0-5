--- ipsec-tools-0.7/configure.ac.orig	2007-10-22 08:50:11.000000000 -0200
+++ ipsec-tools-0.7/configure.ac	2007-10-19 18:07:41.000000000 -0200
@@ -19,7 +19,10 @@ AM_PROG_LEX
 AC_SUBST(LEXLIB)
 AC_PROG_EGREP
 
-CFLAGS_ADD="$CFLAGS_ADD -Wall -Werror -Wno-unused"
+# Can't have -Werror when cross compiling and using the real kernel headers
+# include/linux/list.h warns!
+#CFLAGS_ADD="$CFLAGS_ADD -Wall -Werror -Wno-unused"
+CFLAGS_ADD="$CFLAGS_ADD -Wall -Wno-unused"
 
 case $host in
 *netbsd*)
@@ -89,8 +92,8 @@ case "$host_os" in
                	[Are PF_KEY policy priorities supported?])], [],
     	[#include "$KERNEL_INCLUDE/linux/pfkeyv2.h"])
 
-    GLIBC_BUGS='-include ${top_srcdir}/src/include-glibc/glibc-bugs.h -I${top_srcdir}/src/include-glibc -I${top_builddir}/src/include-glibc'
-    GLIBC_BUGS_LOCAL="-include ${srcdir-.}/src/include-glibc/glibc-bugs.h -I${srcdir-.}/src/include-glibc -I./src/include-glibc"
+    top_srcdir=.
+    GLIBC_BUGS='-include \${top_srcdir}/src/include-glibc/glibc-bugs.h -I\${top_srcdir}/src/include-glibc -I\${top_builddir}/src/include-glibc'
     CPPFLAGS="$GLIBC_BUGS_LOCAL $CPPFLAGS"
     CPPFLAGS="-D_GNU_SOURCE $CPPFLAGS"
     AC_SUBST(GLIBC_BUGS)
@@ -157,8 +160,8 @@ AC_TRY_COMPILE(
 # Check if readline support is requested
 AC_MSG_CHECKING(if readline support is requested)
 AC_ARG_WITH(readline,
-	[  --with-readline         support readline input (yes by default)],
-	[with_readline="$withval"], [with_readline="yes"])
+       AC_HELP_STRING([--with-readline],[support readline input \(yes by default\)]),
+       [with_readline="yes"], )
 AC_MSG_RESULT($with_readline)
 
 # Is readline available?
@@ -168,9 +171,36 @@ if test $with_readline != "no"; then
 				AC_DEFINE(HAVE_READLINE, [],
 					[Is readline available?])
 				LIBS="$LIBS -lreadline"
-		], [])], [])
+               ])])
 fi
 
+AC_MSG_CHECKING(if --with-flex option is specified)
+AC_ARG_WITH(flexdir,
+       [AC_HELP_STRING([--with-flex], [use directiory (default: no)])],
+       [flexdir="$withval"])
+AC_MSG_RESULT(${flexdir-dirdefault})
+
+AC_MSG_CHECKING(if --with-flexlib option is specified)
+AC_ARG_WITH(flexlib,
+       [  --with-flexlib=<LIB>    specify flex library.],
+       [flexlib="$withval"])
+AC_MSG_RESULT(${flexlib-default})
+
+if test "x$flexlib" != "x"; then
+# todo AC_TRY_LINK ...
+       LIBS="$LIBS $flexlib"
+fi
+
+AC_MSG_CHECKING(if --with-zlib option is specified)
+AC_ARG_WITH(zlib,
+       [  --with-zlib=<LIB>    specify zlib library.],
+       [zlib="$withval"])
+AC_MSG_RESULT(${zlib-default})
+
+if test "x$zlib" != "x"; then
+# todo AC_TRY_LINK ...
+       LIBS="$LIBS -L $zlib"
+fi
 
 AC_MSG_CHECKING(if --with-flex option is specified)
 AC_ARG_WITH(flexdir,
@@ -195,11 +225,12 @@ fi
 # Check if a different OpenSSL directory was specified
 AC_MSG_CHECKING(if --with-openssl option is specified)
 AC_ARG_WITH(openssl, [  --with-openssl=DIR      specify OpenSSL directory],
-	[crypto_dir=$withval])
+	[crypto_dir="$withval"])
 AC_MSG_RESULT(${crypto_dir-default})
 
 if test "x$crypto_dir" != "x"; then
 	LIBS="$LIBS -L${crypto_dir}/lib"
+	CFLAGS="-I${crypto_dir}/include $CFLAGS"
 	CPPFLAGS="-I${crypto_dir}/include $CPPLAGS"
 fi
 AC_MSG_CHECKING(openssl version)
@@ -218,8 +249,12 @@ AC_MSG_ERROR([OpenSSL version must be 0.
 AC_CHECK_HEADERS(openssl/engine.h)
 
 # checking rijndael
-AC_CHECK_HEADERS([openssl/aes.h], [], 
-	[CRYPTOBJS="$CRYPTOBJS rijndael-api-fst.o rijndael-alg-fst.o"])
+#AC_TRY_COMPILE(
+#[#include <openssl/aes.h>
+#], [AC_DEFINE([HAVE_AES_H], [], [Have aes.h]],
+# ============== FIXME ==================:
+AC_CHECK_HEADERS([openssl/aes.h], [],
+        [CRYPTOBJS="$CRYPTOBJS rijndael-api-fst.o rijndael-alg-fst.o"])
 
 # checking sha2
 AC_MSG_CHECKING(sha2 support)
@@ -456,28 +491,35 @@ fi
 # Check for Kerberos5 support
 # XXX This must come after all --with-* tests, else the
 # -liconv checks will not work
-AC_MSG_CHECKING(if --enable-gssapi option is specified)
-AC_ARG_ENABLE(gssapi,
-	[  --enable-gssapi         enable GSS-API authentication],
-	[], [enable_gssapi=no])
-AC_MSG_RESULT($enable_gssapi)
-AC_PATH_PROG(KRB5_CONFIG,krb5-config,no)
-if test "x$enable_gssapi" = "xyes"; then
-	if test "$KRB5_CONFIG" != "no"; then
-		krb5_incdir="`$KRB5_CONFIG --cflags gssapi`"
-		krb5_libs="`$KRB5_CONFIG --libs gssapi`"
-	else
-		# No krb5-config; let's make some assumptions based on
-		# the OS.
-		case $host_os in
-		netbsd*)
-			krb5_incdir="-I/usr/include/krb5"
-			krb5_libs="-lgssapi -lkrb5 -lcom_err -lroken -lasn1"
-			;;
-		*)
-			AC_MSG_ERROR([krb5-config not found, but needed for GSSAPI support. Aborting.])
-			;;
-		esac
+AC_MSG_CHECKING(if --with-krb5 option is specified)
+AC_ARG_WITH(krb5,
+       [  --with-krb5=<LIB>    specify kerberos library.],
+       [krb5="$withval"
+       krb5_incdir="-I${krb5}/include"
+       krb5_libs="-L${krb5}/lib -lkrb5 -lk5crypto -lcom_err -lgssapi_krb5"
+       LIBS="$LIBS $krb5_libs"
+       CPPFLAGS_ADD="$krb5_incdir $CPPFLAGS_ADD"
+       AC_DEFINE([HAVE_GSSAPI], [], [Enable GSS API])
+       ])
+AC_MSG_RESULT(${krb5-no})
+
+if test "x$krb5" == "x"; then
+       AC_MSG_CHECKING(if --enable-gssapi option is specified)
+       AC_ARG_ENABLE(gssapi,
+               [  --enable-gssapi         enable GSS-API authentication],
+               [], [enable_gssapi=no])
+       AC_MSG_RESULT($enable_gssapi)
+       AC_PATH_PROG(KRB5_CONFIG,krb5-config,no)
+       if test "x$enable_gssapi" = "xyes"; then
+               if test "x$KRB5_CONFIG" != "xno"; then
+                       krb5_incdir="`$KRB5_CONFIG --cflags gssapi`"
+                       krb5_libs="`$KRB5_CONFIG --libs gssapi`"
+                       LIBS="$LIBS $krb5_libs"
+                       CPPFLAGS_ADD="$krb5_incdir $CPPFLAGS_ADD"
+                       AC_DEFINE([HAVE_GSSAPI], [], [Enable GSS API])
+               else
+                       AC_MSG_ERROR([krb5-config not found, but needed for GSSAPI support. Aborting.])
+               fi
 	fi
 	LIBS="$LIBS $krb5_libs"
 	CPPFLAGS_ADD="$krb5_incdir $CPPFLAGS_ADD"
@@ -538,6 +580,12 @@ if test "x$enable_gssapi" = "xyes"; then
 	LIBS=$saved_LIBS
 fi
 
+AC_MSG_CHECKING("HOST")
+AC_MSG_RESULT($HOST)
+
+AC_MSG_CHECKING("BUILD")
+AC_MSG_RESULT($BUILD)
+
 AC_MSG_CHECKING(if --enable-stats option is specified)
 AC_ARG_ENABLE(stats,
         [  --enable-stats          enable statistics logging function],
@@ -643,7 +691,7 @@ if test "$buggygetaddrinfo" = "yes"; the
 fi
 
 # Check if kernel support is available for NAT-T, defaults to no. 
-kernel_natt="no"
+kernel_natt="yes"
 
 AC_MSG_CHECKING(kernel NAT-Traversal support)
 case $host_os in
