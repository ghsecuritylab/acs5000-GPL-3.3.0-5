#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "@CYACSINFO@.h"
#include "cystrings.h"
#include "cycommon.h"

unsigned char *var_@CYACSINFO@Table(struct variable *, oid *, size_t *, int,
				 size_t *, WriteMethod **);

oid @CYACSINFO@Table_oid[] = { PROD_OID, 3, 1};

extern int cy_numports;

#define CYACSINFO_INDEX_OID_LEN 	PROD_OID_SIZE+4

struct variable3 @CYACSINFO@Table_variables[] = {
#define COLUMN_CYISPORTNUMBER	1
	{COLUMN_CYISPORTNUMBER	, ASN_INTEGER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 1}},
#define COLUMN_CYISPORTTTY	2
	{COLUMN_CYISPORTTTY	, ASN_OCTET_STR, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 2}},
#define COLUMN_CYISPORTNAME	3
	{COLUMN_CYISPORTNAME	, ASN_OCTET_STR, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 3}},
#define COLUMN_CYISPORTSPEED	4
	{COLUMN_CYISPORTSPEED	, ASN_INTEGER, RONLY,  var_@CYACSINFO@Table, 2,
	 {1, 4}},
#define COLUMN_CYISPORTTXBYTES	5
	{COLUMN_CYISPORTTXBYTES	, ASN_COUNTER, RONLY,  var_@CYACSINFO@Table, 2,
	 {1, 5}},
#define COLUMN_CYISPORTRXBYTES	6
	{COLUMN_CYISPORTRXBYTES	, ASN_COUNTER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 6}},
#define COLUMN_CYISPORTERRFRAME	7
	{COLUMN_CYISPORTERRFRAME, ASN_COUNTER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 7}},
#define COLUMN_CYISPORTERRPARITY 8
	{COLUMN_CYISPORTERRPARITY, ASN_COUNTER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 8}},
#define COLUMN_CYISPORTERRBREAKS 9
	{COLUMN_CYISPORTERRBREAKS, ASN_COUNTER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 9}},
#define COLUMN_CYISPORTERROVERRUN 10
	{COLUMN_CYISPORTERROVERRUN, ASN_COUNTER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 10}},
#define COLUMN_CYISPORTSIGDTR	11
	{COLUMN_CYISPORTSIGDTR	, ASN_INTEGER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 11}},
#define COLUMN_CYISPORTSIGCD	12
	{COLUMN_CYISPORTSIGCD	, ASN_INTEGER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 12}},
#define COLUMN_CYISPORTSIGDSR	13
	{COLUMN_CYISPORTSIGDSR	, ASN_INTEGER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 13}},
#define COLUMN_CYISPORTSIGRTS	14
	{COLUMN_CYISPORTSIGRTS	, ASN_INTEGER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 14}},
#define COLUMN_CYISPORTSIGCTS	15
	{COLUMN_CYISPORTSIGCTS	, ASN_INTEGER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 15}},
#define COLUMN_CYISPORTSIGRI	16
	{COLUMN_CYISPORTSIGRI	, ASN_INTEGER, RONLY, var_@CYACSINFO@Table, 2,
	 {1, 16}}
};


/** Initializes the @CYACSINFO@Table module */
void init_@CYACSINFO@Table(void)
{
	REGISTER_MIB("@CYACSINFO@Table", @CYACSINFO@Table_variables,
		     variable3, @CYACSINFO@Table_oid);
}

/** Initalizes the @CYACSINFO@ module */
void init_@CYACSINFO@(void)
{
	init_@CYACSINFO@Table();
}

/*
 * cy_rproc_stat
 */
static unsigned int cy_read_proc_stat ( unsigned char * pref, unsigned char *cmd)
{
	int result=0 ;
	unsigned char line[200], *temp, *pos;
	struct stat st;
	FILE *fd_file;

	if (!(fd_file = fopen ("/proc/tty/driver/serial_ttyS", "r"))) {
		return 0;
	}
	while (fgets(line,200,fd_file)) {
		if (strncmp(line,pref,strlen(pref))) continue; 
		temp = line + strlen(pref) + 2;
		while (*temp) {
			while (*temp && (*temp != cmd[0])) temp++;
			if (!*temp) break;	// not found
			if (!strncmp(temp,cmd,strlen(cmd))) { // found cmd
				temp += strlen(cmd);
				if (isdigit(*temp)) {
					pos = temp;
					while (*temp && (*temp != ' ')) temp++;
					if (temp) *temp=0x00;
					result = atoi(pos);
				} else {
					result = 1;
				}
				break;
			}
			temp++;	
		}
		break;
	}
	fclose(fd_file);
	return result;
}


/*
 * var_@CYACSINFO@Table():
 */
unsigned char *var_@CYACSINFO@Table(struct variable *vp,
				 oid * name,
				 size_t * length,
				 int exact,
				 size_t * var_len,
				 WriteMethod ** write_method)
{
	/*
	 * variables we may use later 
	 */
	static long long_ret;
	int index;
	static unsigned char prefix[10], string[100];

	// find the index
	if (header_simple_table
	    (vp, name, length, exact, var_len, write_method, cy_numports)
	    == MATCH_FAILED)
		return NULL;

	index = name[CYACSINFO_INDEX_OID_LEN];
	sprintf(prefix,"s%d",index);
	memset(string,0,100);

	/*
	 * * this is where we do the value assignments for the mib results.
	 */
	switch (vp->magic) {
		case COLUMN_CYISPORTNUMBER :
		return (unsigned char *) &index;
		break;
			
		case COLUMN_CYISPORTTTY :
		if (! cy_rwsp_conf(prefix,"tty",string,100,0)) {
			strcpy(string,"inactive");
		}
		*var_len = strlen(string);
		return (u_char *) &string;
		break;

		case COLUMN_CYISPORTNAME :
		cy_rwsp_conf(prefix,"alias",string,100,0);
		*var_len = strlen(string);
		return (u_char *) &string;
		break;

		case COLUMN_CYISPORTSPEED :
		long_ret = cy_read_proc_stat((prefix+1),"baud:");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTTXBYTES :
		long_ret = cy_read_proc_stat((prefix+1),"tx:");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTRXBYTES :
		long_ret = cy_read_proc_stat((prefix+1),"rx:");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTERRFRAME :
		long_ret = cy_read_proc_stat((prefix+1),"fe:");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTERRPARITY :
		long_ret = cy_read_proc_stat((prefix+1),"pe:");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTERRBREAKS :
		long_ret = cy_read_proc_stat((prefix+1),"brk:");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTERROVERRUN :
		long_ret = cy_read_proc_stat((prefix+1),"oe:");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTSIGDTR :
		long_ret = cy_read_proc_stat((prefix+1),"DTR");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTSIGCD :
		long_ret = cy_read_proc_stat((prefix+1),"CD");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTSIGDSR :
		long_ret = cy_read_proc_stat((prefix+1),"DSR");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTSIGRTS :
		long_ret = cy_read_proc_stat((prefix+1),"RTS");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTSIGCTS :
		long_ret = cy_read_proc_stat((prefix+1),"CTS");
		return (unsigned char *) &long_ret;
		break;

		case COLUMN_CYISPORTSIGRI :
		long_ret = cy_read_proc_stat((prefix+1),"RI");
		return (unsigned char *) &long_ret;
		break;

	default:
		break;
	}
	return NULL;
}
