/* (c) 2001 Art & Logic, Inc. All Rights Rerverved. */
/* $Id: XmlRpc.h,v 1.1.1.1 2005/09/01 02:36:38 edson Exp $ */

#ifndef h_XmlRpc
#define h_XmlRpc

#include "Dmf.h"
#ifdef qXmlRpc


/*
 * An Implementation of the XML-RPC specification (see 
 * <http://www.xmlrpc.com/spec> for full details.
 */

/*
 * bring in the helper functions and structures that we need.
 */
#include "RpcUtil.h"

/*
 * OVERVIEW of Xml-Rpc.
 *
 * All XML-RPC calls are handled by the dmfXmlRpcHandler form handler that is
 * registered with the server as part of our init. We also build a symbol table
 * of functions (of type 'XmlRpcFunc', see below) that are associated with
 * method names that may be called through this interface. 
 *
 * When an XML-RPC call arrives at the form handler, an expat parser is
 * created, and we parse the body of the form, which must be a well-formed XML
 * message in the XML-RPC format. We pull out the method name, and build a
 * tree of parameters using the XmlRpcTree and XmlRpcNode structures (see
 * below). When the parser is done, if the tree is in a valid state, the
 * handler calls the XmlRpcFunc that is associated with the method name
 * specified in the rpc call, or returns an error if no such method exists.
 *
 * The XmlRpcFunc pulls its parameters out of the 'params' tree that it is
 * passed as a parameter, and does whatever it needs to do to execute. Any
 * output generated by the function is converted into XmlRpcValueNodes and
 * added to the tree pointed to by the 'output' parameter to the XmlRpcFunc.
 *
 * If the rpc function returns a success code, the tree of output nodes is
 * converted to a string that contains the xml-rpc response and the handler
 * writes that string as its response back to the client.
 *
 * Otherwise, the handler writes a fault message back to the client.
 */

/*
 * NOTES on the data structures and functions in this file.
 *
 * The XML-RPC specification (see <http://www.xmlrpc.com/spec>) defines a set
 * of basic data types and two 'container' value types. The basic data types
 * supported are:
 *    integer
 *    double
 *    boolean
 *    string
 *    base64
 *    dateTime (doesn't appear to be too useful)
 * These values may be contained (optionally) within one of the following data
 * structures:
 *    'struct' -- associates a name with a value, combines one or more
 *    key/value pairs into a single structure
 * 
 *    'struct member' -- is also a container. Most of the time, it will
 *    contain a single value, but may contain nested containers.
 *
 *    'array' -- combines one (zero?) or more values into a single container.
 *    The values are not named. 
 *
 * Note that throughout, anything can be nested inside anything else (structs
 * and arrays are value types, so anywhere a simple value would be allowed,
 * one of the container value types are also allowed. Also, types may mix
 * heterogeneously according to the spec.
 *
 * We create C data structures to handle all of these objects, and associated
 * functions that let us easily create/modify/examine/destroy the resulting
 * trees. When we parse incoming XML-RPC requests, the parser creates a single
 * tree that represents all the parameters provided for the method call. 
 *
 * XML-RPC handler functions must accept as one of their arguments a pointer
 * to the root of the parameter tree. Output from the handler function is also
 * a tree of XML-RPC value types. The framework 'form handler' function that
 * drives the process then converts the tree of values into the response text
 * that is sent back to the application that made the XML-RPC call.
 *
 */



/*
 * Initialize the Xml-Rpc service.
 */
extern int dmfInitXmlRpc(void);

/*
 * Clean up the Xml-Rpc service.
 */
extern void dmfCloseXmlRpc(void);


/*
 * "GoForms" handler that consumes XML-RPC messages (contained in the query
 * string, originating in the body of a POST message and attempts to use them
 * to call functions on the device.
 */
extern void dmfXmlRpcHandler(webs_t wp, char_t *path, char_t *query);

/*
 * Adds the specified Xml-RPC handler function to the system. Note that we do
 * not support removing a function from the system once it's been added.
 */
extern int dmfXmlRpcAddFunction(char_t* methodName, RpcFunc func);







#endif   /* ifdef qXmlRpc */
#endif   /* #ifndef h_XmlRpc */
