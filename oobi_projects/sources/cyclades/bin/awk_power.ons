BEGIN {
  FS = " "
}

$1 ~ /^s[0-9]*\.pmtype/ || /^a[12]\.pmtype/ || /^all\.pmtype/ {
  next;
}

$1 ~ /^s[0-9]*\.protocol/ || /^a[12]\.protocol/ || /^all\.protocol/ {
  if ($2 == "ipdu") {
    split ($1, s, ".");
    if (s[1] == "all") {
      port=portU="all";
    }
    else {
      port=s[1];
      portU="tty"toupper(s[1]);
    }
    if(!(portU in pmdConf)) {
      pmdConf[portU] = portU;
      if (portU != "all")
	    print portU"::::::auto" >> PMD_CONF;
      print port".protocol pm_ng" >> PSLAVE;
    }
    next;
  }
}

$1 ~ /^s[0-9]*\.pmoutlet/ || /^a[12]\.pmoutlet/ || /^all\.pmoutlet/ {
  split ($1, s, ".");
  if (s[1] == all)
    next;
  port="tty"toupper(s[1]);
  printf "$"port >> PMD_GRP;
  groups[port]="$"port;
  sep=" ";
  for (i=2; i <= NF; i++) {
    split($i, s, ".");
    printf "%c!tty%s[%s]", sep, toupper(s[1]), s[2] >> PMD_GRP;
    sep=",";
  }
  printf "\n" >> PMD_GRP
  next;
}

$1 ~ /^s[0-9]*\.users/ {
  split($1, s, ".");
  port="tty"toupper(s[1]);
  for (i=2; i <= NF; i++) {
    split($i, s, ",");
    for(j in s) {
      if (length(s[j]) == 0) break;
      if (s[j] in userS) {
        userS[s[j]] = userS[s[j]]","port;
      }
      else {
        userS[s[j]] = port;
      }
    }
  }
}

$1 ~ /^s[0-9]*\.pmusers/ || /^a[12]\.pmusers/ {
  if ($2 == "all") {
	print $0 >> PSLAVE;
	next;
  } 
  split ($1, s, ".");
  port="tty"toupper(s[1]);
  for (i=2; i <= NF; i++) {
    if (index($i,":") != 0) {
      split($i,s,":");
      userD[s[1]]=s[1];
    }
  }
  next;
}

{
  print $0 >> PSLAVE;
  next;
}

END {
  for (value in userD) {
    if (value in userS) {
      split(userS[value],ports,",");
      sep=" ";
      for(port in ports) {
        if (ports[port] in groups) {
          userD[value]=userD[value] sep groups[ports[port]];
          sep=",";
        }
      }
    }
    print userD[value] >> PMD_USER;
  }
}
