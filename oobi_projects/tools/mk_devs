#!/bin/sh

TOOLS=$(dirname $0)

. ${TOOLS}/shell_utils
 
check_vars TARG TARGET_DIR

check_dirs $TARGET_DIR $TARGET_DIR/dev

cd $TARGET_DIR/dev || exit -1

major=19
minorK=65
minorO=133
minorM=112

majorM=19

portsM=0
portsO=0
portsS=0
portsK=0

case "$TARG" in
  "kvm")
    portsK=8
    portsO=2
  ;;
  "kvmapc")
    portsK=8
    portsO=2
  ;;
  "ons")
    portsM=2
    portsK=6
    portsS=8
    minorS=73
    portsO=2
  ;;
  "kvmnetv2")
    portsM=2
    portsK=16
    portsO=6
    minorO=190
  ;;
  "ts1h")
    major=4
    portsS=1
    minorS=63
  ;;
# ACS Kernel 2.6.16
#   portsS=48
#   minorS=63
#   minorM=63
#   majorM=4
#   portsM=2
  *)
    portsS=48
    minorS=64
    portsM=2
esac

cnt=0;
while [ $cnt -lt $portsK ] ; do
  cnt=`expr $cnt + 1` 
  minor=`expr $cnt + $minorK` 
  rm -f ttyK$cnt
  mknod -m 0600 ttyK$cnt c $major $minor || exit -1
  chgrp tty ttyK$cnt || exit -1
done


if [ "$TARG" == "kvm" -o "$TARG" == "ons" -o "$TARG" == "kvmapc" ] ; then
  rm -f ttyA1
  mknod -m 0666 ttyA1 c 4 65 || exit -1
  chgrp tty ttyA1 || exit -1
fi
 
if [ "$TARG" == "ons" ] ; then
  rm -f ttyA2
  mknod -m 0666 ttyA2 c $major 73 || exit -1
  chgrp tty ttyA2 || exit -1
  rm -f ttyA3
  mknod -m 0666 ttyA3 c $major 72 || exit -1
  chgrp tty ttyA3 || exit -1
  rm -f ttyK7
  mknod -m 0666 ttyK7 c $major 82 || exit -1
  chgrp tty ttyK7 || exit -1
  rm -f ttyK8
  mknod -m 0666 ttyK8 c $major 83 || exit -1
  chgrp tty ttyK8 || exit -1
  rm -f ttyK9
  mknod -m 0666 ttyK9 c $major 84 || exit -1
  chgrp tty ttyK9 || exit -1
fi

if [ "$TARG" == "kvmnetv2" ] ; then
  rm -f ttyA1
  mknod -m 0666 ttyA1 c $major 82 || exit -1
  chgrp tty ttyA1 || exit -1
  rm -f ttyA2
  mknod -m 0666 ttyA2 c $major 83 || exit -1
  chgrp tty ttyA2 || exit -1
  # create a device file for front panel LEDs in KVM/net v2.0
  mknod -m 0666 cy_kvmip_led c 10 151 || exit -1
fi

if [ "$TARG" == "kvmmax" ] ; then
  rm -f ttyA1
  mknod -m 0666 ttyA1 c $major 82 || exit -1
  chgrp tty ttyA1 || exit -1
  rm -f ttyA2
  mknod -m 0666 ttyA2 c $major 83 || exit -1
  chgrp tty ttyA2 || exit -1
  mknod -m 0666 mtd0 b 31 0  || exit -1
  mknod -m 0666 mtd1 b 31 1  || exit -1
  mknod -m 0666 mtd2 b 31 2  || exit -1
  mknod -m 0666 sec2 c 26 0 || exit -1
fi



cnt=0
while [ $cnt -lt $portsS ] ; do
  cnt=`expr $cnt + 1` 
  minor=`expr $cnt + $minorS` 
  rm -f ttyS$cnt
  mknod -m 0600 ttyS$cnt c $major $minor || exit -1
  chgrp tty ttyS$cnt || exit -1
done

cnt=0
minor=$minorO
while [ $cnt -lt $portsO ] ; do
  rm -f osd$cnt
  mknod -m 0666 osd$cnt c 10 $minor || exit -1
  cnt=`expr $cnt + 1` 
  minor=`expr $minor + 1` 
done

cnt=0
minor=$minorM
while [ $cnt -lt $portsM ] ; do
  cnt=`expr $cnt + 1` 
  minor=`expr $minor + 1` 
  rm -f ttyM$cnt
  mknod -m 0600 ttyM$cnt c $majorM $minor || exit -1
  chgrp tty ttyM$cnt || exit -1
done

mkdir pts || exit -1
mknod ptmx c 5 2 || exit -1
cnt=0
for lett in p q r s ; do
  for port in 0 1 2 3 4 5 6 7 8 9 a b c d e f ; do
    rm -f pty$lett$port
    rm -f tty$lett$port
    mknod -m 0666 pty$lett$port c 2 $cnt || exit -1
    mknod -m 0666 tty$lett$port c 3 $cnt || exit -1
    chgrp tty pty$lett$port || exit -1
    chgrp tty tty$lett$port || exit -1
    cnt=`expr $cnt + 1`
  done
done

cnt=0
for lett in a b ; do
  minor=`expr $cnt \* 64`
  mknod hd$lett b 3 $minor || exit -1
  for i in `seq 1 20` ; do
    minor1=`expr $minor + $i`
    mknod hd$lett$i b 3 $minor1 || exit -1
  done
  cnt=`expr $cnt + 1`
done

cnt=0
for lett in c d ; do
  minor=`expr $cnt \* 64`
  mknod hd$lett b 22 $minor || exit -1
  for i in `seq 1 20` ; do
    minor1=`expr $minor + $i`
    mknod hd$lett$i b 22 $minor1 || exit -1
  done
  cnt=`expr $cnt + 1`
done

mkfifo cyc_alarm || exit -1

# build especial devices for ppp, WDT, and CPU LED.
mknod -m 0666 wdt c 10 130 || exit -1
mknod -m 0666 led c 10 131 || exit -1
mknod -m 0666 ppp c 108 0 || exit -1
mknod -m 0666 cy_apctl c 10 240 || exit -1

while read  mode type major minor device
do
    mknod -m $mode $device $type $major $minor || exit -1
done << -EOF
0666 c 5  1 console
0666 c 1  6 core
0666 c 1  7 full
0640 c 1  2 kmem
0640 c 1  1 mem
0666 c 1  3 null
0666 c 1  5 zero
0640 c 1  4 port
0666 c 4 64 ttyS0
0660 b 1  0 ram0
0660 b 1  1 ram1
0660 b 1  2 ram2
0660 b 1  3 ram3
0666 c 5  0 tty
0600 c 4  0 tty0
0666 c 4  1 tty1
0666 c 4  2 tty2
0666 c 4  3 tty3
0666 c 4  4 tty4
0666 c 4  5 tty5
0666 c 4  6 tty6
0666 c 4  7 tty7
0666 c 4  8 tty8
0444 c 1  8 random
0444 c 1  9 urandom
0660 b 7  0 loop0
0660 b 7  1 loop1
0666 c 10 135 rtc
0600 c 10 11 tpanel
-EOF

# ACS kernel 2.6.16
# rm -f /dev/ttyS0
# mknod -m 0600 /dev/ttyS0 c 204 46

ln -sf ram1 ram

exit 0

